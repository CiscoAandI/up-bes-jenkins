---
# tasks file for docker_install
# Code modified from its original source:
# https://wwwin-github.cisco.com/raw/SVS-Automation/jenkins-worker/master/playbooks/roles/04-docker/tasks/main.yml

- name: Uninstall Podman and Prior Docker Installations
  ansible.builtin.package:
    state: absent
    name: "{{ package_removals }}"

- name: Remove Any container images on system
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /var/lib/docker
    - /var/lib/containers
    - /var/lib/containerd
    - /opt/containerd
    - /etc/docker

# This won't work since it can't call outside the network
# - name: Import GPG key
#   ansible.builtin.rpm_key:
#     state: present
#     key: https://download.docker.com/linux/centos/gpg

- name: Set Fact for path to docker rpms gz file When pulling from Controller
  ansible.builtin.set_fact:
    docker_arch_path: "{{ playbook_dir }}/roles/docker_install/files/{{ docker_rpm_filename }}"
    docker_arch_dest_path: "/tmp/{{ docker_rpm_filename }}"
  when: docker_rpm_src == 'local'

- name: Set Fact for path to docker rpms gz file When pulling from Artifactory
  ansible.builtin.set_fact:
    docker_arch_path: "{{ artifact_path }}"
    docker_arch_dest_path: "/tmp/{{ docker_rpm_filename }}"
  when: docker_rpm_src == 'artifactory'

- name: Create /etc/docker dir if not exist
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: 750

- name: Touch /etc/docker/daemon.json if it doesnt exist or update mod time
  ansible.builtin.file:
    path: /etc/docker/daemon.json
    state: touch
    mode: 740
    modification_time: preserve
    access_time: preserve

- name: Download docker_arch_path to the /tmp/ dir using no auth and no proxy
  ansible.builtin.get_url:
    url: "{{ artifact_path }}"
    dest: "{{ docker_arch_dest_path }}"
    mode: 755
    validate_certs: false
    force: true
    timeout: 120
    use_proxy: false
    #url_username: "{{ artifactory_user }}"
    #url_password: "{{ artifactory_password }}"
    # basic_auth: yes
    http_agent: "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0"
    #headers:
    #  Authorization: "Basic {{ artifactory_basic_auth }}"
  when: docker_rpm_src == 'artifactory'

- name: Unarchive the gz file containing the rpms to install
  ansible.builtin.unarchive:
    src: "{% if docker_rpm_src == 'local' %}{{ docker_arch_path }}{% else %}{{ docker_arch_dest_path }}{% endif %}"
    # src: "{{ docker_arch_dest_path }}"
    dest: /tmp/
    remote_src: "{% if docker_rpm_src == 'local' %}no{% else %}yes{% endif %}"
    list_files: yes
  register: docker_rpms_unarchived
  environment:
    no_proxy: "*"

# After unarchived to /tmp/ let yum/dnf install the docker rpms
# - name: Install Docker and Related RPM Packages from /tmp dir
#   ansible.builtin.package:
#     name: "{{ package_installs }}"
#   register: docker_install

- name: Install Docker and Related RPM Packages from /tmp dir
  ansible.builtin.yum:
    name: "{{ package_installs }}"
    disable_gpg_check: yes
  register: docker_install

# Group created so current user is allowed to use docker commands
- name: Create docker group
  ansible.builtin.group:
    local: true
    name: docker
    state: present

- name: Add the BES user to the Docker group
  ansible.builtin.user:
    name: dascode
    groups: docker
    append: yes

- name: Start and Enable the Docker service
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
    daemon_reload: yes
  when: docker_install is changed

# Remove the files we downloaded and unarchived
- name: Remove rpm files and archive from tmp
  ansible.builtin.file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items:
    - "{{ docker_rpms_unarchived.files }}"
    - "{{ docker_arch_dest_path }}"

- name: Confirm Docker Installed and Version
  ansible.builtin.shell: "docker --version"
  register: docker_version_check
